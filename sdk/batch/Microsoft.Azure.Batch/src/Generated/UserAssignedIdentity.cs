// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

//
// This file was autogenerated by a tool.
// Do not modify it.
//

namespace Microsoft.Azure.Batch
{
    using Models = Microsoft.Azure.Batch.Protocol.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The reference to a user assigned identity associated with the Batch pool which a compute node will use.
    /// </summary>
    public partial class UserAssignedIdentity : ITransportObjectProvider<Models.UserAssignedIdentity>, IPropertyMetadata
    {
        private class PropertyContainer : PropertyCollection
        {
            public readonly PropertyAccessor<string> ClientIdProperty;
            public readonly PropertyAccessor<ExitOptions> DefaultProperty;
            public readonly PropertyAccessor<ExitOptions> FileUploadErrorProperty;
            public readonly PropertyAccessor<ExitOptions> PreProcessingErrorProperty;
            public readonly PropertyAccessor<string> PrincipalIdProperty;
            public readonly PropertyAccessor<string> ResourceIdProperty;

            public PropertyContainer() : base(BindingState.Unbound)
            {
                this.ClientIdProperty = this.CreatePropertyAccessor<string>(nameof(ClientId), BindingAccess.Read | BindingAccess.Write);
                this.DefaultProperty = this.CreatePropertyAccessor<ExitOptions>(nameof(Default), BindingAccess.Read | BindingAccess.Write);
                this.FileUploadErrorProperty = this.CreatePropertyAccessor<ExitOptions>(nameof(FileUploadError), BindingAccess.Read | BindingAccess.Write);
                this.PreProcessingErrorProperty = this.CreatePropertyAccessor<ExitOptions>(nameof(PreProcessingError), BindingAccess.Read | BindingAccess.Write);
                this.PrincipalIdProperty = this.CreatePropertyAccessor<string>(nameof(PrincipalId), BindingAccess.Read | BindingAccess.Write);
                this.ResourceIdProperty = this.CreatePropertyAccessor<string>(nameof(ResourceId), BindingAccess.Read | BindingAccess.Write);
            }

            public PropertyContainer(Models.UserAssignedIdentity protocolObject) : base(BindingState.Bound)
            {
                this.ClientIdProperty = this.CreatePropertyAccessor(
                    protocolObject.ClientId,
                    nameof(ClientId),
                    BindingAccess.Read);
                this.DefaultProperty = this.CreatePropertyAccessor(
                    UtilitiesInternal.CreateObjectWithNullCheck(protocolObject.DefaultProperty, o => new ExitOptions(o).Freeze()),
                    nameof(Default),
                    BindingAccess.Read);
                this.FileUploadErrorProperty = this.CreatePropertyAccessor(
                    UtilitiesInternal.CreateObjectWithNullCheck(protocolObject.FileUploadError, o => new ExitOptions(o).Freeze()),
                    nameof(FileUploadError),
                    BindingAccess.Read);
                this.PreProcessingErrorProperty = this.CreatePropertyAccessor(
                    UtilitiesInternal.CreateObjectWithNullCheck(protocolObject.PreProcessingError, o => new ExitOptions(o).Freeze()),
                    nameof(PreProcessingError),
                    BindingAccess.Read);
                this.PrincipalIdProperty = this.CreatePropertyAccessor(
                    protocolObject.PrincipalId,
                    nameof(PrincipalId),
                    BindingAccess.Read);
                this.ResourceIdProperty = this.CreatePropertyAccessor(
                    protocolObject.ResourceId,
                    nameof(ResourceId),
                    BindingAccess.Read);
            }
        }

        private readonly PropertyContainer propertyContainer;

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAssignedIdentity"/> class.
        /// </summary>
        /// <param name='resourceId'>The ARM resource id of the user assigned identity</param>
        public UserAssignedIdentity(
            string resourceId)
        {
            this.propertyContainer = new PropertyContainer();
            this.ResourceId = resourceId;
        }

        internal UserAssignedIdentity(Models.UserAssignedIdentity protocolObject)
        {
            this.propertyContainer = new PropertyContainer(protocolObject);
        }

        #endregion Constructors

        #region UserAssignedIdentity

        /// <summary>
        /// Gets or sets the client id of the user assigned identity.
        /// </summary>
        public string ClientId
        {
            get { return this.propertyContainer.ClientIdProperty.Value; }
            set { this.propertyContainer.ClientIdProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets how the Batch service should respond if the task fails with an exit condition not covered by any 
        /// of the other properties.
        /// </summary>
        /// <remarks>
        /// This value is used if the task exits with any nonzero exit code not listed in the <see cref="ExitCodes"/> or 
        /// <see cref="ExitCodeRanges"/> collection, with a preprocessing error if the <see cref="PreProcessingError"/> property 
        /// is not present, or with a file upload failure if the <see cref="FileUploadError"/> property is not present.
        /// </remarks>
        public ExitOptions Default
        {
            get { return this.propertyContainer.DefaultProperty.Value; }
            set { this.propertyContainer.DefaultProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets how the Batch service should respond if a file upload error occurs.
        /// </summary>
        /// <remarks>
        /// If the task exited with an exit code that was specified via <see cref="ExitCodes" /> or <see cref="ExitCodeRanges" 
        /// />, and then encountered a file upload error, then the action specified by the exit code takes precedence.
        /// </remarks>
        public ExitOptions FileUploadError
        {
            get { return this.propertyContainer.FileUploadErrorProperty.Value; }
            set { this.propertyContainer.FileUploadErrorProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets how the Batch service should respond if the task fails to start due to an error.
        /// </summary>
        public ExitOptions PreProcessingError
        {
            get { return this.propertyContainer.PreProcessingErrorProperty.Value; }
            set { this.propertyContainer.PreProcessingErrorProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets the principal id of the user assigned identity.
        /// </summary>
        public string PrincipalId
        {
            get { return this.propertyContainer.PrincipalIdProperty.Value; }
            set { this.propertyContainer.PrincipalIdProperty.Value = value; }
        }

        /// <summary>
        /// Gets or sets the ARM resource id of the user assigned identity
        /// </summary>
        public string ResourceId
        {
            get { return this.propertyContainer.ResourceIdProperty.Value; }
            set { this.propertyContainer.ResourceIdProperty.Value = value; }
        }

        #endregion // UserAssignedIdentity

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            get { return this.propertyContainer.HasBeenModified; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return this.propertyContainer.IsReadOnly; }
            set { this.propertyContainer.IsReadOnly = value; }
        }

        #endregion //IPropertyMetadata

        #region Internal/private methods
        /// <summary>
        /// Return a protocol object of the requested type.
        /// </summary>
        /// <returns>The protocol object of the requested type.</returns>
        Models.UserAssignedIdentity ITransportObjectProvider<Models.UserAssignedIdentity>.GetTransportObject()
        {
            Models.UserAssignedIdentity result = new Models.UserAssignedIdentity()
            {
                ClientId = this.ClientId,
                DefaultProperty = UtilitiesInternal.CreateObjectWithNullCheck(this.Default, (o) => o.GetTransportObject()),
                FileUploadError = UtilitiesInternal.CreateObjectWithNullCheck(this.FileUploadError, (o) => o.GetTransportObject()),
                PreProcessingError = UtilitiesInternal.CreateObjectWithNullCheck(this.PreProcessingError, (o) => o.GetTransportObject()),
                PrincipalId = this.PrincipalId,
                ResourceId = this.ResourceId,
            };

            return result;
        }


        #endregion // Internal/private methods
    }
}